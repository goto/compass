// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	worker "github.com/goto/compass/pkg/worker"
	mock "github.com/stretchr/testify/mock"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Enqueue provides a mock function with given fields: ctx, jobs
func (_m *Worker) Enqueue(ctx context.Context, jobs ...worker.JobSpec) error {
	_va := make([]interface{}, len(jobs))
	for _i := range jobs {
		_va[_i] = jobs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...worker.JobSpec) error); ok {
		r0 = rf(ctx, jobs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type Worker_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - jobs ...worker.JobSpec
func (_e *Worker_Expecter) Enqueue(ctx interface{}, jobs ...interface{}) *Worker_Enqueue_Call {
	return &Worker_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx}, jobs...)...)}
}

func (_c *Worker_Enqueue_Call) Run(run func(ctx context.Context, jobs ...worker.JobSpec)) *Worker_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]worker.JobSpec, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(worker.JobSpec)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Worker_Enqueue_Call) Return(_a0 error) *Worker_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Enqueue_Call) RunAndReturn(run func(context.Context, ...worker.JobSpec) error) *Worker_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: typ, h
func (_m *Worker) Register(typ string, h worker.JobHandler) error {
	ret := _m.Called(typ, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, worker.JobHandler) error); ok {
		r0 = rf(typ, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Worker_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - typ string
//   - h worker.JobHandler
func (_e *Worker_Expecter) Register(typ interface{}, h interface{}) *Worker_Register_Call {
	return &Worker_Register_Call{Call: _e.mock.On("Register", typ, h)}
}

func (_c *Worker_Register_Call) Run(run func(typ string, h worker.JobHandler)) *Worker_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(worker.JobHandler))
	})
	return _c
}

func (_c *Worker_Register_Call) Return(_a0 error) *Worker_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Register_Call) RunAndReturn(run func(string, worker.JobHandler) error) *Worker_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *Worker) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Worker_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Worker_Expecter) Run(ctx interface{}) *Worker_Run_Call {
	return &Worker_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *Worker_Run_Call) Run(run func(ctx context.Context)) *Worker_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Worker_Run_Call) Return(_a0 error) *Worker_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Run_Call) RunAndReturn(run func(context.Context) error) *Worker_Run_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWorker interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorker(t mockConstructorTestingTNewWorker) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	asset "github.com/goto/compass/core/asset"

	mock "github.com/stretchr/testify/mock"
)

// DiscoveryRepository is an autogenerated mock type for the DiscoveryRepository type
type DiscoveryRepository struct {
	mock.Mock
}

type DiscoveryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryRepository) EXPECT() *DiscoveryRepository_Expecter {
	return &DiscoveryRepository_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function with given fields: ctx, indexName, clonedIndexName
func (_m *DiscoveryRepository) Clone(ctx context.Context, indexName string, clonedIndexName string) error {
	ret := _m.Called(ctx, indexName, clonedIndexName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, clonedIndexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type DiscoveryRepository_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - clonedIndexName string
func (_e *DiscoveryRepository_Expecter) Clone(ctx interface{}, indexName interface{}, clonedIndexName interface{}) *DiscoveryRepository_Clone_Call {
	return &DiscoveryRepository_Clone_Call{Call: _e.mock.On("Clone", ctx, indexName, clonedIndexName)}
}

func (_c *DiscoveryRepository_Clone_Call) Run(run func(ctx context.Context, indexName string, clonedIndexName string)) *DiscoveryRepository_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscoveryRepository_Clone_Call) Return(_a0 error) *DiscoveryRepository_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_Clone_Call) RunAndReturn(run func(context.Context, string, string) error) *DiscoveryRepository_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByIndexName provides a mock function with given fields: ctx, indexName
func (_m *DiscoveryRepository) DeleteByIndexName(ctx context.Context, indexName string) error {
	ret := _m.Called(ctx, indexName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_DeleteByIndexName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByIndexName'
type DiscoveryRepository_DeleteByIndexName_Call struct {
	*mock.Call
}

// DeleteByIndexName is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
func (_e *DiscoveryRepository_Expecter) DeleteByIndexName(ctx interface{}, indexName interface{}) *DiscoveryRepository_DeleteByIndexName_Call {
	return &DiscoveryRepository_DeleteByIndexName_Call{Call: _e.mock.On("DeleteByIndexName", ctx, indexName)}
}

func (_c *DiscoveryRepository_DeleteByIndexName_Call) Run(run func(ctx context.Context, indexName string)) *DiscoveryRepository_DeleteByIndexName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryRepository_DeleteByIndexName_Call) Return(_a0 error) *DiscoveryRepository_DeleteByIndexName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_DeleteByIndexName_Call) RunAndReturn(run func(context.Context, string) error) *DiscoveryRepository_DeleteByIndexName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByURN provides a mock function with given fields: ctx, assetURN
func (_m *DiscoveryRepository) DeleteByURN(ctx context.Context, assetURN string) error {
	ret := _m.Called(ctx, assetURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, assetURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_DeleteByURN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByURN'
type DiscoveryRepository_DeleteByURN_Call struct {
	*mock.Call
}

// DeleteByURN is a helper method to define mock.On call
//   - ctx context.Context
//   - assetURN string
func (_e *DiscoveryRepository_Expecter) DeleteByURN(ctx interface{}, assetURN interface{}) *DiscoveryRepository_DeleteByURN_Call {
	return &DiscoveryRepository_DeleteByURN_Call{Call: _e.mock.On("DeleteByURN", ctx, assetURN)}
}

func (_c *DiscoveryRepository_DeleteByURN_Call) Run(run func(ctx context.Context, assetURN string)) *DiscoveryRepository_DeleteByURN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryRepository_DeleteByURN_Call) Return(_a0 error) *DiscoveryRepository_DeleteByURN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_DeleteByURN_Call) RunAndReturn(run func(context.Context, string) error) *DiscoveryRepository_DeleteByURN_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlias provides a mock function with given fields: ctx, indexName, alias
func (_m *DiscoveryRepository) UpdateAlias(ctx context.Context, indexName string, alias string) error {
	ret := _m.Called(ctx, indexName, alias)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_UpdateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlias'
type DiscoveryRepository_UpdateAlias_Call struct {
	*mock.Call
}

// UpdateAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - alias string
func (_e *DiscoveryRepository_Expecter) UpdateAlias(ctx interface{}, indexName interface{}, alias interface{}) *DiscoveryRepository_UpdateAlias_Call {
	return &DiscoveryRepository_UpdateAlias_Call{Call: _e.mock.On("UpdateAlias", ctx, indexName, alias)}
}

func (_c *DiscoveryRepository_UpdateAlias_Call) Run(run func(ctx context.Context, indexName string, alias string)) *DiscoveryRepository_UpdateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscoveryRepository_UpdateAlias_Call) Return(_a0 error) *DiscoveryRepository_UpdateAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_UpdateAlias_Call) RunAndReturn(run func(context.Context, string, string) error) *DiscoveryRepository_UpdateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIndexSettings provides a mock function with given fields: ctx, indexName, body
func (_m *DiscoveryRepository) UpdateIndexSettings(ctx context.Context, indexName string, body string) error {
	ret := _m.Called(ctx, indexName, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_UpdateIndexSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIndexSettings'
type DiscoveryRepository_UpdateIndexSettings_Call struct {
	*mock.Call
}

// UpdateIndexSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - body string
func (_e *DiscoveryRepository_Expecter) UpdateIndexSettings(ctx interface{}, indexName interface{}, body interface{}) *DiscoveryRepository_UpdateIndexSettings_Call {
	return &DiscoveryRepository_UpdateIndexSettings_Call{Call: _e.mock.On("UpdateIndexSettings", ctx, indexName, body)}
}

func (_c *DiscoveryRepository_UpdateIndexSettings_Call) Run(run func(ctx context.Context, indexName string, body string)) *DiscoveryRepository_UpdateIndexSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscoveryRepository_UpdateIndexSettings_Call) Return(_a0 error) *DiscoveryRepository_UpdateIndexSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_UpdateIndexSettings_Call) RunAndReturn(run func(context.Context, string, string) error) *DiscoveryRepository_UpdateIndexSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *DiscoveryRepository) Upsert(_a0 context.Context, _a1 asset.Asset) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, asset.Asset) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type DiscoveryRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 asset.Asset
func (_e *DiscoveryRepository_Expecter) Upsert(_a0 interface{}, _a1 interface{}) *DiscoveryRepository_Upsert_Call {
	return &DiscoveryRepository_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1)}
}

func (_c *DiscoveryRepository_Upsert_Call) Run(run func(_a0 context.Context, _a1 asset.Asset)) *DiscoveryRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(asset.Asset))
	})
	return _c
}

func (_c *DiscoveryRepository_Upsert_Call) Return(_a0 error) *DiscoveryRepository_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryRepository_Upsert_Call) RunAndReturn(run func(context.Context, asset.Asset) error) *DiscoveryRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDiscoveryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscoveryRepository creates a new instance of DiscoveryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscoveryRepository(t mockConstructorTestingTNewDiscoveryRepository) *DiscoveryRepository {
	mock := &DiscoveryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

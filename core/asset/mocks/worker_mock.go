// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	asset "github.com/goto/compass/core/asset"

	mock "github.com/stretchr/testify/mock"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Worker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Worker_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Worker_Expecter) Close() *Worker_Close_Call {
	return &Worker_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Worker_Close_Call) Run(run func()) *Worker_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Close_Call) Return(_a0 error) *Worker_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Close_Call) RunAndReturn(run func() error) *Worker_Close_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueDeleteAssetJob provides a mock function with given fields: ctx, urn
func (_m *Worker) EnqueueDeleteAssetJob(ctx context.Context, urn string) error {
	ret := _m.Called(ctx, urn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, urn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueDeleteAssetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeleteAssetJob'
type Worker_EnqueueDeleteAssetJob_Call struct {
	*mock.Call
}

// EnqueueDeleteAssetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - urn string
func (_e *Worker_Expecter) EnqueueDeleteAssetJob(ctx interface{}, urn interface{}) *Worker_EnqueueDeleteAssetJob_Call {
	return &Worker_EnqueueDeleteAssetJob_Call{Call: _e.mock.On("EnqueueDeleteAssetJob", ctx, urn)}
}

func (_c *Worker_EnqueueDeleteAssetJob_Call) Run(run func(ctx context.Context, urn string)) *Worker_EnqueueDeleteAssetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Worker_EnqueueDeleteAssetJob_Call) Return(_a0 error) *Worker_EnqueueDeleteAssetJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueDeleteAssetJob_Call) RunAndReturn(run func(context.Context, string) error) *Worker_EnqueueDeleteAssetJob_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueDeleteAssetsByQueryExprJob provides a mock function with given fields: ctx, queryExpr
func (_m *Worker) EnqueueDeleteAssetsByQueryExprJob(ctx context.Context, queryExpr string) error {
	ret := _m.Called(ctx, queryExpr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queryExpr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueDeleteAssetsByQueryExprJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeleteAssetsByQueryExprJob'
type Worker_EnqueueDeleteAssetsByQueryExprJob_Call struct {
	*mock.Call
}

// EnqueueDeleteAssetsByQueryExprJob is a helper method to define mock.On call
//   - ctx context.Context
//   - queryExpr string
func (_e *Worker_Expecter) EnqueueDeleteAssetsByQueryExprJob(ctx interface{}, queryExpr interface{}) *Worker_EnqueueDeleteAssetsByQueryExprJob_Call {
	return &Worker_EnqueueDeleteAssetsByQueryExprJob_Call{Call: _e.mock.On("EnqueueDeleteAssetsByQueryExprJob", ctx, queryExpr)}
}

func (_c *Worker_EnqueueDeleteAssetsByQueryExprJob_Call) Run(run func(ctx context.Context, queryExpr string)) *Worker_EnqueueDeleteAssetsByQueryExprJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Worker_EnqueueDeleteAssetsByQueryExprJob_Call) Return(_a0 error) *Worker_EnqueueDeleteAssetsByQueryExprJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueDeleteAssetsByQueryExprJob_Call) RunAndReturn(run func(context.Context, string) error) *Worker_EnqueueDeleteAssetsByQueryExprJob_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueIndexAssetJob provides a mock function with given fields: ctx, ast
func (_m *Worker) EnqueueIndexAssetJob(ctx context.Context, ast asset.Asset) error {
	ret := _m.Called(ctx, ast)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, asset.Asset) error); ok {
		r0 = rf(ctx, ast)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueIndexAssetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueIndexAssetJob'
type Worker_EnqueueIndexAssetJob_Call struct {
	*mock.Call
}

// EnqueueIndexAssetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - ast asset.Asset
func (_e *Worker_Expecter) EnqueueIndexAssetJob(ctx interface{}, ast interface{}) *Worker_EnqueueIndexAssetJob_Call {
	return &Worker_EnqueueIndexAssetJob_Call{Call: _e.mock.On("EnqueueIndexAssetJob", ctx, ast)}
}

func (_c *Worker_EnqueueIndexAssetJob_Call) Run(run func(ctx context.Context, ast asset.Asset)) *Worker_EnqueueIndexAssetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(asset.Asset))
	})
	return _c
}

func (_c *Worker_EnqueueIndexAssetJob_Call) Return(_a0 error) *Worker_EnqueueIndexAssetJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueIndexAssetJob_Call) RunAndReturn(run func(context.Context, asset.Asset) error) *Worker_EnqueueIndexAssetJob_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueSoftDeleteAssetJob provides a mock function with given fields: ctx, params
func (_m *Worker) EnqueueSoftDeleteAssetJob(ctx context.Context, params asset.SoftDeleteAssetParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, asset.SoftDeleteAssetParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueSoftDeleteAssetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueSoftDeleteAssetJob'
type Worker_EnqueueSoftDeleteAssetJob_Call struct {
	*mock.Call
}

// EnqueueSoftDeleteAssetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - params asset.SoftDeleteAssetParams
func (_e *Worker_Expecter) EnqueueSoftDeleteAssetJob(ctx interface{}, params interface{}) *Worker_EnqueueSoftDeleteAssetJob_Call {
	return &Worker_EnqueueSoftDeleteAssetJob_Call{Call: _e.mock.On("EnqueueSoftDeleteAssetJob", ctx, params)}
}

func (_c *Worker_EnqueueSoftDeleteAssetJob_Call) Run(run func(ctx context.Context, params asset.SoftDeleteAssetParams)) *Worker_EnqueueSoftDeleteAssetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(asset.SoftDeleteAssetParams))
	})
	return _c
}

func (_c *Worker_EnqueueSoftDeleteAssetJob_Call) Return(_a0 error) *Worker_EnqueueSoftDeleteAssetJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueSoftDeleteAssetJob_Call) RunAndReturn(run func(context.Context, asset.SoftDeleteAssetParams) error) *Worker_EnqueueSoftDeleteAssetJob_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueSoftDeleteAssetsJob provides a mock function with given fields: ctx, assets
func (_m *Worker) EnqueueSoftDeleteAssetsJob(ctx context.Context, assets []asset.Asset) error {
	ret := _m.Called(ctx, assets)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []asset.Asset) error); ok {
		r0 = rf(ctx, assets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueSoftDeleteAssetsJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueSoftDeleteAssetsJob'
type Worker_EnqueueSoftDeleteAssetsJob_Call struct {
	*mock.Call
}

// EnqueueSoftDeleteAssetsJob is a helper method to define mock.On call
//   - ctx context.Context
//   - assets []asset.Asset
func (_e *Worker_Expecter) EnqueueSoftDeleteAssetsJob(ctx interface{}, assets interface{}) *Worker_EnqueueSoftDeleteAssetsJob_Call {
	return &Worker_EnqueueSoftDeleteAssetsJob_Call{Call: _e.mock.On("EnqueueSoftDeleteAssetsJob", ctx, assets)}
}

func (_c *Worker_EnqueueSoftDeleteAssetsJob_Call) Run(run func(ctx context.Context, assets []asset.Asset)) *Worker_EnqueueSoftDeleteAssetsJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]asset.Asset))
	})
	return _c
}

func (_c *Worker_EnqueueSoftDeleteAssetsJob_Call) Return(_a0 error) *Worker_EnqueueSoftDeleteAssetsJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueSoftDeleteAssetsJob_Call) RunAndReturn(run func(context.Context, []asset.Asset) error) *Worker_EnqueueSoftDeleteAssetsJob_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueSyncAssetJob provides a mock function with given fields: ctx, service
func (_m *Worker) EnqueueSyncAssetJob(ctx context.Context, service string) error {
	ret := _m.Called(ctx, service)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_EnqueueSyncAssetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueSyncAssetJob'
type Worker_EnqueueSyncAssetJob_Call struct {
	*mock.Call
}

// EnqueueSyncAssetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *Worker_Expecter) EnqueueSyncAssetJob(ctx interface{}, service interface{}) *Worker_EnqueueSyncAssetJob_Call {
	return &Worker_EnqueueSyncAssetJob_Call{Call: _e.mock.On("EnqueueSyncAssetJob", ctx, service)}
}

func (_c *Worker_EnqueueSyncAssetJob_Call) Run(run func(ctx context.Context, service string)) *Worker_EnqueueSyncAssetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Worker_EnqueueSyncAssetJob_Call) Return(_a0 error) *Worker_EnqueueSyncAssetJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_EnqueueSyncAssetJob_Call) RunAndReturn(run func(context.Context, string) error) *Worker_EnqueueSyncAssetJob_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWorker interface {
	mock.TestingT
	Cleanup(func())
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWorker(t mockConstructorTestingTNewWorker) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

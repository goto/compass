// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"

	worker "github.com/goto/compass/pkg/worker"
	mock "github.com/stretchr/testify/mock"
)

// JobProcessor is an autogenerated mock type for the JobProcessor type
type JobProcessor struct {
	mock.Mock
}

type JobProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *JobProcessor) EXPECT() *JobProcessor_Expecter {
	return &JobProcessor_Expecter{mock: &_m.Mock}
}

// Enqueue provides a mock function with given fields: ctx, jobs
func (_m *JobProcessor) Enqueue(ctx context.Context, jobs ...worker.Job) error {
	_va := make([]interface{}, len(jobs))
	for _i := range jobs {
		_va[_i] = jobs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...worker.Job) error); ok {
		r0 = rf(ctx, jobs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobProcessor_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type JobProcessor_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - jobs ...worker.Job
func (_e *JobProcessor_Expecter) Enqueue(ctx interface{}, jobs ...interface{}) *JobProcessor_Enqueue_Call {
	return &JobProcessor_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx}, jobs...)...)}
}

func (_c *JobProcessor_Enqueue_Call) Run(run func(ctx context.Context, jobs ...worker.Job)) *JobProcessor_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]worker.Job, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(worker.Job)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *JobProcessor_Enqueue_Call) Return(_a0 error) *JobProcessor_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobProcessor_Enqueue_Call) RunAndReturn(run func(context.Context, ...worker.Job) error) *JobProcessor_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, types, fn
func (_m *JobProcessor) Process(ctx context.Context, types []string, fn worker.JobExecutorFunc) error {
	ret := _m.Called(ctx, types, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, worker.JobExecutorFunc) error); ok {
		r0 = rf(ctx, types, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type JobProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - types []string
//   - fn worker.JobExecutorFunc
func (_e *JobProcessor_Expecter) Process(ctx interface{}, types interface{}, fn interface{}) *JobProcessor_Process_Call {
	return &JobProcessor_Process_Call{Call: _e.mock.On("Process", ctx, types, fn)}
}

func (_c *JobProcessor_Process_Call) Run(run func(ctx context.Context, types []string, fn worker.JobExecutorFunc)) *JobProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(worker.JobExecutorFunc))
	})
	return _c
}

func (_c *JobProcessor_Process_Call) Return(_a0 error) *JobProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobProcessor_Process_Call) RunAndReturn(run func(context.Context, []string, worker.JobExecutorFunc) error) *JobProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewJobProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobProcessor creates a new instance of JobProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobProcessor(t mockConstructorTestingTNewJobProcessor) *JobProcessor {
	mock := &JobProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

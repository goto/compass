// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	worker "github.com/goto/compass/pkg/worker"
	mock "github.com/stretchr/testify/mock"
)

// DeadJobManager is an autogenerated mock type for the DeadJobManager type
type DeadJobManager struct {
	mock.Mock
}

type DeadJobManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DeadJobManager) EXPECT() *DeadJobManager_Expecter {
	return &DeadJobManager_Expecter{mock: &_m.Mock}
}

// ClearDeadJobs provides a mock function with given fields: ctx, jobIDs
func (_m *DeadJobManager) ClearDeadJobs(ctx context.Context, jobIDs []string) error {
	ret := _m.Called(ctx, jobIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, jobIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeadJobManager_ClearDeadJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDeadJobs'
type DeadJobManager_ClearDeadJobs_Call struct {
	*mock.Call
}

// ClearDeadJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - jobIDs []string
func (_e *DeadJobManager_Expecter) ClearDeadJobs(ctx interface{}, jobIDs interface{}) *DeadJobManager_ClearDeadJobs_Call {
	return &DeadJobManager_ClearDeadJobs_Call{Call: _e.mock.On("ClearDeadJobs", ctx, jobIDs)}
}

func (_c *DeadJobManager_ClearDeadJobs_Call) Run(run func(ctx context.Context, jobIDs []string)) *DeadJobManager_ClearDeadJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *DeadJobManager_ClearDeadJobs_Call) Return(_a0 error) *DeadJobManager_ClearDeadJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeadJobManager_ClearDeadJobs_Call) RunAndReturn(run func(context.Context, []string) error) *DeadJobManager_ClearDeadJobs_Call {
	_c.Call.Return(run)
	return _c
}

// DeadJobs provides a mock function with given fields: ctx, size, offset
func (_m *DeadJobManager) DeadJobs(ctx context.Context, size int, offset int) ([]worker.Job, error) {
	ret := _m.Called(ctx, size, offset)

	var r0 []worker.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]worker.Job, error)); ok {
		return rf(ctx, size, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []worker.Job); ok {
		r0 = rf(ctx, size, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]worker.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, size, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeadJobManager_DeadJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeadJobs'
type DeadJobManager_DeadJobs_Call struct {
	*mock.Call
}

// DeadJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - size int
//   - offset int
func (_e *DeadJobManager_Expecter) DeadJobs(ctx interface{}, size interface{}, offset interface{}) *DeadJobManager_DeadJobs_Call {
	return &DeadJobManager_DeadJobs_Call{Call: _e.mock.On("DeadJobs", ctx, size, offset)}
}

func (_c *DeadJobManager_DeadJobs_Call) Run(run func(ctx context.Context, size int, offset int)) *DeadJobManager_DeadJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *DeadJobManager_DeadJobs_Call) Return(_a0 []worker.Job, _a1 error) *DeadJobManager_DeadJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeadJobManager_DeadJobs_Call) RunAndReturn(run func(context.Context, int, int) ([]worker.Job, error)) *DeadJobManager_DeadJobs_Call {
	_c.Call.Return(run)
	return _c
}

// Resurrect provides a mock function with given fields: ctx, jobIDs
func (_m *DeadJobManager) Resurrect(ctx context.Context, jobIDs []string) error {
	ret := _m.Called(ctx, jobIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, jobIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeadJobManager_Resurrect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resurrect'
type DeadJobManager_Resurrect_Call struct {
	*mock.Call
}

// Resurrect is a helper method to define mock.On call
//   - ctx context.Context
//   - jobIDs []string
func (_e *DeadJobManager_Expecter) Resurrect(ctx interface{}, jobIDs interface{}) *DeadJobManager_Resurrect_Call {
	return &DeadJobManager_Resurrect_Call{Call: _e.mock.On("Resurrect", ctx, jobIDs)}
}

func (_c *DeadJobManager_Resurrect_Call) Run(run func(ctx context.Context, jobIDs []string)) *DeadJobManager_Resurrect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *DeadJobManager_Resurrect_Call) Return(_a0 error) *DeadJobManager_Resurrect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeadJobManager_Resurrect_Call) RunAndReturn(run func(context.Context, []string) error) *DeadJobManager_Resurrect_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDeadJobManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeadJobManager creates a new instance of DeadJobManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeadJobManager(t mockConstructorTestingTNewDeadJobManager) *DeadJobManager {
	mock := &DeadJobManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

# Configuration for golangci-lint@v1.64.8
# See https://golangci-lint.run/usage/configuration/

[run]
timeout                = "10m"                     # Max time golangci-lint is allowed to run
modules-download-mode  = "readonly"                # Avoids changing go.sum/go.mod while resolving modules
go                    = "1.23"                     # Go version used to run linters

[output]
show-stats             = true                      # Show summary statistics per linter
sort-results           = true                      # Sort results by file name and line number

[issues]
uniq-by-line           = false                     # Allow multiple issues per line
exclude-dirs           = ["internal/testutils"]    # Skip linting testutils folder
include                = ["EXC0005"]               # Only include issues with this code (if enabled)
exclude-case-sensitive = false                     # Exclude patterns are case-insensitive
max-issues-per-linter  = 0                         # Unlimited issues per linter
max-same-issues        = 0                         # Unlimited identical issues

exclude-rules = [
    # Ignore shadowing of `err` or `ctx` within the same block
    { text = 'declaration of "(err|ctx)" shadows declaration at', linters = ["govet"] },

    # Ignore duplicate code warnings in CLI package
    { path = "cli/.*", linters = ["dupl"] },

    # Exclude strict rules in test files
    { path = "_test\\.go", linters = ["dupl", "gosec", "lll", "gocognit", "goconst", "exhaustruct"] },

    # Allow long `go:generate` lines
    { linters = ["lll"], source = "^//go:generate " },

    # Allow unchecked error returns in tests
    { path = "_test\\.go", text = "^Error return value is not checked$", linters = ["errcheck"] },
]

[linters]
disable-all            = true                      # Disable all by default
enable = [
    # Core linters
    "errcheck",                                   # Check for unchecked errors
    "gosimple",                                   # Simplify Go code
    "govet",                                      # Go's built-in analyzer
    "ineffassign",                                # Find unused variable assignments
    "staticcheck",                                # Advanced static analysis
    "unused",                                     # Detect unused variables, funcs, etc.
    "bodyclose",                                  # Ensure response bodies are closed

    # Style linters
    "dupl",                                       # Detect code duplication
    "errname",                                    # Enforce error naming convention (e.g., `errFoo`)
    "errorlint",                                  # Use `errors.Is`/`errors.As` instead of type assertions
    "exhaustruct",                                # Warn if struct fields are not initialized
    "forbidigo",                                  # Forbid `fmt.Println` or `log.Println` in production
    "gci",                                        # Enforce import grouping and order
    "gocheckcompilerdirectives",                  # Check for valid Go compiler directives
    "gochecknoinits",                             # Disallow `init()` usage
    "gocognit",                                   # Detect overly complex functions
    "goconst",                                    # Suggest constants for repeated literals
    "gocritic",                                   # Collection of useful checks
    "gofumpt",                                    # Stricter `gofmt` with more formatting rules
    "lll",                                        # Flag long lines
    "misspell",                                   # Detect common misspellings
    "musttag",                                    # Ensure struct fields have tags (e.g., JSON)
    "nakedret",                                   # Avoid naked returns in long functions
    "nilerr",                                     # Warn on nil error comparisons
    "noctx",                                      # Ensure context is passed to slow operations
    "nolintlint",                                 # Linter for `nolint` comments
    "revive",                                     # Fast, configurable, extensible linter
    "rowserrcheck",                               # Ensure DB rows are properly checked for errors
    "sqlclosecheck",                              # Check if DB resources like rows are closed
    "stylecheck",                                 # Go style issues (part of `staticcheck`)
    "usetesting",                                 # Ensure correct use of testing package
    "testpackage",                                # Test files should not import the parent package
    "thelper",                                    # Detect misused `t.Helper()` calls
    "unconvert",                                  # Detect unnecessary type conversions
    "usestdlibvars",                              # Prefer standard constants (e.g., `http.StatusOK`)

    # Security
    "gosec",                                      # Security analyzer for Go

    # Additional
    "cyclop",                                     # Cyclomatic complexity
    "decorder",                                   # Decoding order in structs
    "gochecknoglobals",                           # Avoid global variables
    "godox",                                      # Detect TODOs, FIXMEs
    "ireturn",                                    # Enforce interfaces in return types
    "nestif",                                     # Detect deeply nested `if` statements
    "prealloc",                                   # Preallocate slices where possible
    "predeclared",                                # Warn when redefining predeclared identifiers
    "tagliatelle",                                # Enforce tag naming/style
    "wastedassign",                               # Detect assignments never used
]

[linters-settings]
[linters-settings.errcheck]
check-type-assertions = true                      # Check type assertions (e.g., `val, ok := i.(T)`)
exclude-functions    = []                         # Allow ignoring errors from fmt functions

[linters-settings.exhaustruct]
include              = ["github\\.com/goto/compass/internal/server/v1beta1\\.APIServerDeps"]  # Only apply to specific types
check-exported       = false                     # Don't require full struct initialization for exported structs

[linters-settings.govet]
enable  = [
    "shadow",                                     # Check for variable shadowing
    "asmdecl",                                   # Assembly declaration checks
    "assign",                                    # Assignment checks
    "cgocall",                                   # CGo related checks
    "fieldalignment",                            # Struct field alignment
    "findcall",                                  # Example analyzer
    "framepointer",                              # Frame pointer checks
    "structtag",                                 # Struct tag validation
]
disable = []                                      # Empty to override default disables

[linters-settings.gci]
sections       = ["standard", "default"]         # Import grouping
skip-generated = true                            # Skip generated files

[linters-settings.gocognit]
min-complexity = 20                              # Threshold for cognitive complexity warnings

[linters-settings.goconst]
ignore-tests    = true                           # Skip test files
match-constant  = true                           # Suggest existing constants
min-len         = 3                              # Minimum string length to check

[linters-settings.gocritic]
enabled-checks = [
    # Custom checks not enabled by default
    "badLock",                                   # Suspicious mutex operations
    "commentedOutCode",                          # Detect commented-out code
    "deferInLoop",                               # Defer in loops may leak resources
    "filepathJoin",                              # Incorrect filepath.Join usage
    "returnAfterHttpError",                      # Missing return after http.Error
    "sloppyReassign",                            # Confusing reassignments
    "sprintfQuotedString",                       # Suggest %q for quoted strings
    "truncateCmp",                               # Potential truncation in comparisons
    "weakCond",                                  # Weak conditional expressions
    "boolExprSimplify",                          # Boolean expression simplifications
    "commentedOutImport",                        # Detect commented imports
    "emptyFallthrough",                          # Unnecessary fallthrough
    "emptyStringTest",                           # Better empty string checks
    "nestingReduce",                             # Excessive nesting
    "preferFilepathJoin",                        # Prefer filepath.Join over concatenation
    "ptrToRefParam",                             # Pointer to reference type parameters
    "redundantSprint",                           # Unnecessary fmt.Sprint usage
    "regexpSimplify",                            # Regexp simplifications
    "stringsCompare",                            # Suggest strings comparison alternatives
    "todoCommentWithoutDetail",                  # Require detailed TODOs
    "unnamedResult",                             # Suggest named result parameters
    "preferFprint",                              # Prefer fmt.Fprint over fmt.Sprint
    "preferStringWriter",                        # Prefer WriteString methods
    "rangeValCopy",                              # Large range value copies
    "stringXbytes",                              # String/byte slice conversions

    # These gocritic checks are already enabled by default, so no need to specify them again.
    # You can uncomment and override individually if needed.

    # "argOrder",             # Function calls with suspicious argument order
    # "badCall",              # Detect calling non-function or nil function
    # "badCond",              # Suspicious conditions like `if x == x`
    # "caseOrder",            # switch-case clauses are not ordered
    # "deprecatedComment",    # Flags `Deprecated:` comments without explanations
    # "dupArg",               # Function call with duplicate arguments
    # "dupCase",              # Duplicate cases in switch
    # "exitAfterDefer",       # `os.Exit` called right after `defer`
    # "mapKey",               # Suspicious map key usage
    # "offBy1",               # Common off-by-one errors in loops
    # "sloppyTypeAssert",     # Type assertions that can panic unnecessarily
    # "assignOp",             # `x = x + 1` can be `x += 1`
    # "elseif",               # Suggest replacing `else { if ... }` with `else if`
    # "ifElseChain",          # Long `if...else` chains — use switch instead
    # "underef",              # Unnecessary pointer dereferencing
    # "unslice",              # Unnecessary slicing: `s[:]`
    # "wrapperFunc",          # Function just wraps another function call
]

[linters-settings.gocritic.settings]
[linters-settings.gocritic.settings.underef]
skipRecvDeref = false                            # Check all dereferences
[linters-settings.gocritic.settings.unnamedResult]
checkExported = true                             # Check exported functions
[linters-settings.gocritic.settings.rangeValCopy]
sizeThreshold = 512                              # Size threshold for copy warnings (bytes)

[linters-settings.gofumpt]
extra-rules = true                               # Enable stricter formatting

[linters-settings.gosec]
excludes    = ["G101"]                           # Disable hardcoded credentials check (many false positives)
concurrency = 4                                  # Parallel analysis
severity    = "medium"                           # Minimum severity to report
confidence  = "low"                              # Minimum confidence to report

[linters-settings.lll]
line-length = 160                                # Max line length
tab-width   = 1                                  # Tab character width

[linters-settings.misspell]
locale      = "US"                               # American English spelling
ignore-words = ["someword"]                      # Custom ignored words

[linters-settings.nolintlint]
require-specific     = true                      # Require specific linter in directives
allow-leading-space  = true                      # Allow spaces before nolint
allow-unused         = false                     # Warn about unused nolint

[linters-settings.revive]
severity   = "error"                             # Treat all issues as errors
confidence = 0.8                                 # Minimum confidence threshold

[linters-settings.revive.ignore]
generated = true                                 # Skip generated files

# Revive rule configurations
[[linters-settings.revive.rules]]
name = "var-declaration"                         # Simplify variable declarations
[[linters-settings.revive.rules]]
name = "unexported-return"                       # Avoid returning unexported types
[[linters-settings.revive.rules]]
name = "blank-imports"                           # Disallow blank imports
[[linters-settings.revive.rules]]
name = "context-as-argument"                     # Context should be first parameter
[[linters-settings.revive.rules]]
name = "exported"                                # Exported symbol naming/conventions
[[linters-settings.revive.rules]]
name = "if-return"                               # Simplify if-return patterns
[[linters-settings.revive.rules]]
name = "increment-decrement"                     # Prefer i++ over i += 1
[[linters-settings.revive.rules]]
name = "indent-error-flow"                       # Proper error handling indentation
[[linters-settings.revive.rules]]
name = "argument-limit"                          # Max 5 function arguments
arguments = [5]
[[linters-settings.revive.rules]]
name = "superfluous-else"                        # Remove unnecessary else blocks
[[linters-settings.revive.rules]]
name = "confusing-naming"                        # Avoid similar names
[[linters-settings.revive.rules]]
name = "deep-exit"                               # Avoid os.Exit in functions
[[linters-settings.revive.rules]]
name = "unused-parameter"                        # Flag unused parameters
[[linters-settings.revive.rules]]
name = "struct-tag"                              # Validate struct tags
[[linters-settings.revive.rules]]
name = "modifies-value-receiver"                 # Detect value receiver modifications
[[linters-settings.revive.rules]]
name = "constant-logical-expr"                   # Constant logical expressions
[[linters-settings.revive.rules]]
name = "redefines-builtin-id"                    # Avoid redefining builtins
[[linters-settings.revive.rules]]
name = "function-result-limit"                   # Max 3 return values
arguments = [3]
[[linters-settings.revive.rules]]
name = "range-val-address"                       # Dangerous range value addresses
[[linters-settings.revive.rules]]
name = "call-to-gc"                              # Avoid explicit GC calls
[[linters-settings.revive.rules]]
name = "import-shadowing"                        # Avoid import shadowing
[[linters-settings.revive.rules]]
name = "bare-return"                             # Avoid naked returns
[[linters-settings.revive.rules]]
name = "unused-receiver"                         # Flag unused method receivers
[[linters-settings.revive.rules]]
name = "early-return"                            # Encourage early returns
[[linters-settings.revive.rules]]
name = "unconditional-recursion"                 # Infinite recursion
[[linters-settings.revive.rules]]
name = "identical-branches"                      # Duplicate if branches
[[linters-settings.revive.rules]]
name = "defer"                                   # Defer best practices
[[linters-settings.revive.rules]]
name = "unexported-naming"                       # Unexported naming conventions

[linters-settings.rowserrcheck]
packages  = ["github.com/jmoiron/sqlx"]          # Extended SQL packages to check
db-types  = ["*sql.DB", "*sql.Tx", "*sql.Conn"]  # Database types to check

[linters-settings.usestdlibvars]
http-status-code     = false                    # Don't enforce http.StatusXXX (stylecheck covers this)
time-month           = true                     # Suggest time.Month.String()
time-layout          = true                     # Suggest time.Layout constants
sql-isolation-level  = true                     # Suggest sql.Level constants
tls-signature-scheme = true                     # Suggest tls.SignatureScheme
http-method          = true                     # Suggest http.Method constants
rpc-package-path     = true                     # Suggest rpc default paths

[linters-settings.cyclop]
max-complexity = 10                              # Cyclomatic complexity threshold
skip-tests     = true                            # Skip test files

[linters-settings.decorder]
disable-dec-num-check         = false            # Check declaration counts
disable-dec-order-check       = false            # Check declaration order
disable-init-func-first-check = false            # Check init function position

[linters-settings.gochecknoglobals]
allow = ["Err.*"]                                # Allow error globals

[linters-settings.godox]
keywords = ["TODO", "FIXME", "NOTE"]             # Comment keywords to check

[linters-settings.ireturn]
allow = ["io.Closer", "context.Context"]         # Allowed interface returns
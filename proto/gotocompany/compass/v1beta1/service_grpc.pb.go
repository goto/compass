// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gotocompany/compass/v1beta1/service.proto

package compassv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompassService_GetAllDiscussions_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/GetAllDiscussions"
	CompassService_CreateDiscussion_FullMethodName         = "/gotocompany.compass.v1beta1.CompassService/CreateDiscussion"
	CompassService_GetDiscussion_FullMethodName            = "/gotocompany.compass.v1beta1.CompassService/GetDiscussion"
	CompassService_PatchDiscussion_FullMethodName          = "/gotocompany.compass.v1beta1.CompassService/PatchDiscussion"
	CompassService_CreateComment_FullMethodName            = "/gotocompany.compass.v1beta1.CompassService/CreateComment"
	CompassService_GetAllComments_FullMethodName           = "/gotocompany.compass.v1beta1.CompassService/GetAllComments"
	CompassService_GetComment_FullMethodName               = "/gotocompany.compass.v1beta1.CompassService/GetComment"
	CompassService_UpdateComment_FullMethodName            = "/gotocompany.compass.v1beta1.CompassService/UpdateComment"
	CompassService_DeleteComment_FullMethodName            = "/gotocompany.compass.v1beta1.CompassService/DeleteComment"
	CompassService_SearchAssets_FullMethodName             = "/gotocompany.compass.v1beta1.CompassService/SearchAssets"
	CompassService_GroupAssets_FullMethodName              = "/gotocompany.compass.v1beta1.CompassService/GroupAssets"
	CompassService_SuggestAssets_FullMethodName            = "/gotocompany.compass.v1beta1.CompassService/SuggestAssets"
	CompassService_GetGraph_FullMethodName                 = "/gotocompany.compass.v1beta1.CompassService/GetGraph"
	CompassService_GetAllTypes_FullMethodName              = "/gotocompany.compass.v1beta1.CompassService/GetAllTypes"
	CompassService_GetAllAssets_FullMethodName             = "/gotocompany.compass.v1beta1.CompassService/GetAllAssets"
	CompassService_GetAssetByID_FullMethodName             = "/gotocompany.compass.v1beta1.CompassService/GetAssetByID"
	CompassService_UpsertAsset_FullMethodName              = "/gotocompany.compass.v1beta1.CompassService/UpsertAsset"
	CompassService_UpsertPatchAsset_FullMethodName         = "/gotocompany.compass.v1beta1.CompassService/UpsertPatchAsset"
	CompassService_DeleteAsset_FullMethodName              = "/gotocompany.compass.v1beta1.CompassService/DeleteAsset"
	CompassService_GetAssetStargazers_FullMethodName       = "/gotocompany.compass.v1beta1.CompassService/GetAssetStargazers"
	CompassService_GetAssetVersionHistory_FullMethodName   = "/gotocompany.compass.v1beta1.CompassService/GetAssetVersionHistory"
	CompassService_GetAssetByVersion_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/GetAssetByVersion"
	CompassService_CreateAssetProbe_FullMethodName         = "/gotocompany.compass.v1beta1.CompassService/CreateAssetProbe"
	CompassService_GetUserStarredAssets_FullMethodName     = "/gotocompany.compass.v1beta1.CompassService/GetUserStarredAssets"
	CompassService_GetMyStarredAssets_FullMethodName       = "/gotocompany.compass.v1beta1.CompassService/GetMyStarredAssets"
	CompassService_GetMyStarredAsset_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/GetMyStarredAsset"
	CompassService_StarAsset_FullMethodName                = "/gotocompany.compass.v1beta1.CompassService/StarAsset"
	CompassService_UnstarAsset_FullMethodName              = "/gotocompany.compass.v1beta1.CompassService/UnstarAsset"
	CompassService_GetMyDiscussions_FullMethodName         = "/gotocompany.compass.v1beta1.CompassService/GetMyDiscussions"
	CompassService_CreateTagAsset_FullMethodName           = "/gotocompany.compass.v1beta1.CompassService/CreateTagAsset"
	CompassService_GetTagByAssetAndTemplate_FullMethodName = "/gotocompany.compass.v1beta1.CompassService/GetTagByAssetAndTemplate"
	CompassService_UpdateTagAsset_FullMethodName           = "/gotocompany.compass.v1beta1.CompassService/UpdateTagAsset"
	CompassService_DeleteTagAsset_FullMethodName           = "/gotocompany.compass.v1beta1.CompassService/DeleteTagAsset"
	CompassService_GetAllTagsByAsset_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/GetAllTagsByAsset"
	CompassService_GetAllTagTemplates_FullMethodName       = "/gotocompany.compass.v1beta1.CompassService/GetAllTagTemplates"
	CompassService_CreateTagTemplate_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/CreateTagTemplate"
	CompassService_GetTagTemplate_FullMethodName           = "/gotocompany.compass.v1beta1.CompassService/GetTagTemplate"
	CompassService_UpdateTagTemplate_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/UpdateTagTemplate"
	CompassService_DeleteTagTemplate_FullMethodName        = "/gotocompany.compass.v1beta1.CompassService/DeleteTagTemplate"
)

// CompassServiceClient is the client API for CompassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompassServiceClient interface {
	// Domain: Discussion
	GetAllDiscussions(ctx context.Context, in *GetAllDiscussionsRequest, opts ...grpc.CallOption) (*GetAllDiscussionsResponse, error)
	CreateDiscussion(ctx context.Context, in *CreateDiscussionRequest, opts ...grpc.CallOption) (*CreateDiscussionResponse, error)
	GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error)
	PatchDiscussion(ctx context.Context, in *PatchDiscussionRequest, opts ...grpc.CallOption) (*PatchDiscussionResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetAllComments(ctx context.Context, in *GetAllCommentsRequest, opts ...grpc.CallOption) (*GetAllCommentsResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	// Domain: Asset
	SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error)
	// Domain: Asset
	GroupAssets(ctx context.Context, in *GroupAssetsRequest, opts ...grpc.CallOption) (*GroupAssetsResponse, error)
	SuggestAssets(ctx context.Context, in *SuggestAssetsRequest, opts ...grpc.CallOption) (*SuggestAssetsResponse, error)
	GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error)
	GetAllTypes(ctx context.Context, in *GetAllTypesRequest, opts ...grpc.CallOption) (*GetAllTypesResponse, error)
	GetAllAssets(ctx context.Context, in *GetAllAssetsRequest, opts ...grpc.CallOption) (*GetAllAssetsResponse, error)
	GetAssetByID(ctx context.Context, in *GetAssetByIDRequest, opts ...grpc.CallOption) (*GetAssetByIDResponse, error)
	UpsertAsset(ctx context.Context, in *UpsertAssetRequest, opts ...grpc.CallOption) (*UpsertAssetResponse, error)
	UpsertPatchAsset(ctx context.Context, in *UpsertPatchAssetRequest, opts ...grpc.CallOption) (*UpsertPatchAssetResponse, error)
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error)
	GetAssetStargazers(ctx context.Context, in *GetAssetStargazersRequest, opts ...grpc.CallOption) (*GetAssetStargazersResponse, error)
	GetAssetVersionHistory(ctx context.Context, in *GetAssetVersionHistoryRequest, opts ...grpc.CallOption) (*GetAssetVersionHistoryResponse, error)
	GetAssetByVersion(ctx context.Context, in *GetAssetByVersionRequest, opts ...grpc.CallOption) (*GetAssetByVersionResponse, error)
	CreateAssetProbe(ctx context.Context, in *CreateAssetProbeRequest, opts ...grpc.CallOption) (*CreateAssetProbeResponse, error)
	// Domain: User * Star
	GetUserStarredAssets(ctx context.Context, in *GetUserStarredAssetsRequest, opts ...grpc.CallOption) (*GetUserStarredAssetsResponse, error)
	GetMyStarredAssets(ctx context.Context, in *GetMyStarredAssetsRequest, opts ...grpc.CallOption) (*GetMyStarredAssetsResponse, error)
	GetMyStarredAsset(ctx context.Context, in *GetMyStarredAssetRequest, opts ...grpc.CallOption) (*GetMyStarredAssetResponse, error)
	StarAsset(ctx context.Context, in *StarAssetRequest, opts ...grpc.CallOption) (*StarAssetResponse, error)
	UnstarAsset(ctx context.Context, in *UnstarAssetRequest, opts ...grpc.CallOption) (*UnstarAssetResponse, error)
	GetMyDiscussions(ctx context.Context, in *GetMyDiscussionsRequest, opts ...grpc.CallOption) (*GetMyDiscussionsResponse, error)
	// Domain: Tag Templates
	CreateTagAsset(ctx context.Context, in *CreateTagAssetRequest, opts ...grpc.CallOption) (*CreateTagAssetResponse, error)
	GetTagByAssetAndTemplate(ctx context.Context, in *GetTagByAssetAndTemplateRequest, opts ...grpc.CallOption) (*GetTagByAssetAndTemplateResponse, error)
	UpdateTagAsset(ctx context.Context, in *UpdateTagAssetRequest, opts ...grpc.CallOption) (*UpdateTagAssetResponse, error)
	DeleteTagAsset(ctx context.Context, in *DeleteTagAssetRequest, opts ...grpc.CallOption) (*DeleteTagAssetResponse, error)
	GetAllTagsByAsset(ctx context.Context, in *GetAllTagsByAssetRequest, opts ...grpc.CallOption) (*GetAllTagsByAssetResponse, error)
	GetAllTagTemplates(ctx context.Context, in *GetAllTagTemplatesRequest, opts ...grpc.CallOption) (*GetAllTagTemplatesResponse, error)
	CreateTagTemplate(ctx context.Context, in *CreateTagTemplateRequest, opts ...grpc.CallOption) (*CreateTagTemplateResponse, error)
	GetTagTemplate(ctx context.Context, in *GetTagTemplateRequest, opts ...grpc.CallOption) (*GetTagTemplateResponse, error)
	UpdateTagTemplate(ctx context.Context, in *UpdateTagTemplateRequest, opts ...grpc.CallOption) (*UpdateTagTemplateResponse, error)
	DeleteTagTemplate(ctx context.Context, in *DeleteTagTemplateRequest, opts ...grpc.CallOption) (*DeleteTagTemplateResponse, error)
}

type compassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompassServiceClient(cc grpc.ClientConnInterface) CompassServiceClient {
	return &compassServiceClient{cc}
}

func (c *compassServiceClient) GetAllDiscussions(ctx context.Context, in *GetAllDiscussionsRequest, opts ...grpc.CallOption) (*GetAllDiscussionsResponse, error) {
	out := new(GetAllDiscussionsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllDiscussions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateDiscussion(ctx context.Context, in *CreateDiscussionRequest, opts ...grpc.CallOption) (*CreateDiscussionResponse, error) {
	out := new(CreateDiscussionResponse)
	err := c.cc.Invoke(ctx, CompassService_CreateDiscussion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error) {
	out := new(GetDiscussionResponse)
	err := c.cc.Invoke(ctx, CompassService_GetDiscussion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) PatchDiscussion(ctx context.Context, in *PatchDiscussionRequest, opts ...grpc.CallOption) (*PatchDiscussionResponse, error) {
	out := new(PatchDiscussionResponse)
	err := c.cc.Invoke(ctx, CompassService_PatchDiscussion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, CompassService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllComments(ctx context.Context, in *GetAllCommentsRequest, opts ...grpc.CallOption) (*GetAllCommentsResponse, error) {
	out := new(GetAllCommentsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, CompassService_GetComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, CompassService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CompassService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error) {
	out := new(SearchAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_SearchAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GroupAssets(ctx context.Context, in *GroupAssetsRequest, opts ...grpc.CallOption) (*GroupAssetsResponse, error) {
	out := new(GroupAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_GroupAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) SuggestAssets(ctx context.Context, in *SuggestAssetsRequest, opts ...grpc.CallOption) (*SuggestAssetsResponse, error) {
	out := new(SuggestAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_SuggestAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error) {
	out := new(GetGraphResponse)
	err := c.cc.Invoke(ctx, CompassService_GetGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllTypes(ctx context.Context, in *GetAllTypesRequest, opts ...grpc.CallOption) (*GetAllTypesResponse, error) {
	out := new(GetAllTypesResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllAssets(ctx context.Context, in *GetAllAssetsRequest, opts ...grpc.CallOption) (*GetAllAssetsResponse, error) {
	out := new(GetAllAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAssetByID(ctx context.Context, in *GetAssetByIDRequest, opts ...grpc.CallOption) (*GetAssetByIDResponse, error) {
	out := new(GetAssetByIDResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAssetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpsertAsset(ctx context.Context, in *UpsertAssetRequest, opts ...grpc.CallOption) (*UpsertAssetResponse, error) {
	out := new(UpsertAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_UpsertAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpsertPatchAsset(ctx context.Context, in *UpsertPatchAssetRequest, opts ...grpc.CallOption) (*UpsertPatchAssetResponse, error) {
	out := new(UpsertPatchAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_UpsertPatchAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error) {
	out := new(DeleteAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAssetStargazers(ctx context.Context, in *GetAssetStargazersRequest, opts ...grpc.CallOption) (*GetAssetStargazersResponse, error) {
	out := new(GetAssetStargazersResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAssetStargazers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAssetVersionHistory(ctx context.Context, in *GetAssetVersionHistoryRequest, opts ...grpc.CallOption) (*GetAssetVersionHistoryResponse, error) {
	out := new(GetAssetVersionHistoryResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAssetVersionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAssetByVersion(ctx context.Context, in *GetAssetByVersionRequest, opts ...grpc.CallOption) (*GetAssetByVersionResponse, error) {
	out := new(GetAssetByVersionResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAssetByVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateAssetProbe(ctx context.Context, in *CreateAssetProbeRequest, opts ...grpc.CallOption) (*CreateAssetProbeResponse, error) {
	out := new(CreateAssetProbeResponse)
	err := c.cc.Invoke(ctx, CompassService_CreateAssetProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetUserStarredAssets(ctx context.Context, in *GetUserStarredAssetsRequest, opts ...grpc.CallOption) (*GetUserStarredAssetsResponse, error) {
	out := new(GetUserStarredAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetUserStarredAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetMyStarredAssets(ctx context.Context, in *GetMyStarredAssetsRequest, opts ...grpc.CallOption) (*GetMyStarredAssetsResponse, error) {
	out := new(GetMyStarredAssetsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetMyStarredAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetMyStarredAsset(ctx context.Context, in *GetMyStarredAssetRequest, opts ...grpc.CallOption) (*GetMyStarredAssetResponse, error) {
	out := new(GetMyStarredAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_GetMyStarredAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) StarAsset(ctx context.Context, in *StarAssetRequest, opts ...grpc.CallOption) (*StarAssetResponse, error) {
	out := new(StarAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_StarAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UnstarAsset(ctx context.Context, in *UnstarAssetRequest, opts ...grpc.CallOption) (*UnstarAssetResponse, error) {
	out := new(UnstarAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_UnstarAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetMyDiscussions(ctx context.Context, in *GetMyDiscussionsRequest, opts ...grpc.CallOption) (*GetMyDiscussionsResponse, error) {
	out := new(GetMyDiscussionsResponse)
	err := c.cc.Invoke(ctx, CompassService_GetMyDiscussions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateTagAsset(ctx context.Context, in *CreateTagAssetRequest, opts ...grpc.CallOption) (*CreateTagAssetResponse, error) {
	out := new(CreateTagAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_CreateTagAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetTagByAssetAndTemplate(ctx context.Context, in *GetTagByAssetAndTemplateRequest, opts ...grpc.CallOption) (*GetTagByAssetAndTemplateResponse, error) {
	out := new(GetTagByAssetAndTemplateResponse)
	err := c.cc.Invoke(ctx, CompassService_GetTagByAssetAndTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpdateTagAsset(ctx context.Context, in *UpdateTagAssetRequest, opts ...grpc.CallOption) (*UpdateTagAssetResponse, error) {
	out := new(UpdateTagAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_UpdateTagAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) DeleteTagAsset(ctx context.Context, in *DeleteTagAssetRequest, opts ...grpc.CallOption) (*DeleteTagAssetResponse, error) {
	out := new(DeleteTagAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_DeleteTagAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllTagsByAsset(ctx context.Context, in *GetAllTagsByAssetRequest, opts ...grpc.CallOption) (*GetAllTagsByAssetResponse, error) {
	out := new(GetAllTagsByAssetResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllTagsByAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllTagTemplates(ctx context.Context, in *GetAllTagTemplatesRequest, opts ...grpc.CallOption) (*GetAllTagTemplatesResponse, error) {
	out := new(GetAllTagTemplatesResponse)
	err := c.cc.Invoke(ctx, CompassService_GetAllTagTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateTagTemplate(ctx context.Context, in *CreateTagTemplateRequest, opts ...grpc.CallOption) (*CreateTagTemplateResponse, error) {
	out := new(CreateTagTemplateResponse)
	err := c.cc.Invoke(ctx, CompassService_CreateTagTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetTagTemplate(ctx context.Context, in *GetTagTemplateRequest, opts ...grpc.CallOption) (*GetTagTemplateResponse, error) {
	out := new(GetTagTemplateResponse)
	err := c.cc.Invoke(ctx, CompassService_GetTagTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpdateTagTemplate(ctx context.Context, in *UpdateTagTemplateRequest, opts ...grpc.CallOption) (*UpdateTagTemplateResponse, error) {
	out := new(UpdateTagTemplateResponse)
	err := c.cc.Invoke(ctx, CompassService_UpdateTagTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) DeleteTagTemplate(ctx context.Context, in *DeleteTagTemplateRequest, opts ...grpc.CallOption) (*DeleteTagTemplateResponse, error) {
	out := new(DeleteTagTemplateResponse)
	err := c.cc.Invoke(ctx, CompassService_DeleteTagTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompassServiceServer is the server API for CompassService service.
// All implementations must embed UnimplementedCompassServiceServer
// for forward compatibility
type CompassServiceServer interface {
	// Domain: Discussion
	GetAllDiscussions(context.Context, *GetAllDiscussionsRequest) (*GetAllDiscussionsResponse, error)
	CreateDiscussion(context.Context, *CreateDiscussionRequest) (*CreateDiscussionResponse, error)
	GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error)
	PatchDiscussion(context.Context, *PatchDiscussionRequest) (*PatchDiscussionResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetAllComments(context.Context, *GetAllCommentsRequest) (*GetAllCommentsResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	// Domain: Asset
	SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error)
	// Domain: Asset
	GroupAssets(context.Context, *GroupAssetsRequest) (*GroupAssetsResponse, error)
	SuggestAssets(context.Context, *SuggestAssetsRequest) (*SuggestAssetsResponse, error)
	GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error)
	GetAllTypes(context.Context, *GetAllTypesRequest) (*GetAllTypesResponse, error)
	GetAllAssets(context.Context, *GetAllAssetsRequest) (*GetAllAssetsResponse, error)
	GetAssetByID(context.Context, *GetAssetByIDRequest) (*GetAssetByIDResponse, error)
	UpsertAsset(context.Context, *UpsertAssetRequest) (*UpsertAssetResponse, error)
	UpsertPatchAsset(context.Context, *UpsertPatchAssetRequest) (*UpsertPatchAssetResponse, error)
	DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error)
	GetAssetStargazers(context.Context, *GetAssetStargazersRequest) (*GetAssetStargazersResponse, error)
	GetAssetVersionHistory(context.Context, *GetAssetVersionHistoryRequest) (*GetAssetVersionHistoryResponse, error)
	GetAssetByVersion(context.Context, *GetAssetByVersionRequest) (*GetAssetByVersionResponse, error)
	CreateAssetProbe(context.Context, *CreateAssetProbeRequest) (*CreateAssetProbeResponse, error)
	// Domain: User * Star
	GetUserStarredAssets(context.Context, *GetUserStarredAssetsRequest) (*GetUserStarredAssetsResponse, error)
	GetMyStarredAssets(context.Context, *GetMyStarredAssetsRequest) (*GetMyStarredAssetsResponse, error)
	GetMyStarredAsset(context.Context, *GetMyStarredAssetRequest) (*GetMyStarredAssetResponse, error)
	StarAsset(context.Context, *StarAssetRequest) (*StarAssetResponse, error)
	UnstarAsset(context.Context, *UnstarAssetRequest) (*UnstarAssetResponse, error)
	GetMyDiscussions(context.Context, *GetMyDiscussionsRequest) (*GetMyDiscussionsResponse, error)
	// Domain: Tag Templates
	CreateTagAsset(context.Context, *CreateTagAssetRequest) (*CreateTagAssetResponse, error)
	GetTagByAssetAndTemplate(context.Context, *GetTagByAssetAndTemplateRequest) (*GetTagByAssetAndTemplateResponse, error)
	UpdateTagAsset(context.Context, *UpdateTagAssetRequest) (*UpdateTagAssetResponse, error)
	DeleteTagAsset(context.Context, *DeleteTagAssetRequest) (*DeleteTagAssetResponse, error)
	GetAllTagsByAsset(context.Context, *GetAllTagsByAssetRequest) (*GetAllTagsByAssetResponse, error)
	GetAllTagTemplates(context.Context, *GetAllTagTemplatesRequest) (*GetAllTagTemplatesResponse, error)
	CreateTagTemplate(context.Context, *CreateTagTemplateRequest) (*CreateTagTemplateResponse, error)
	GetTagTemplate(context.Context, *GetTagTemplateRequest) (*GetTagTemplateResponse, error)
	UpdateTagTemplate(context.Context, *UpdateTagTemplateRequest) (*UpdateTagTemplateResponse, error)
	DeleteTagTemplate(context.Context, *DeleteTagTemplateRequest) (*DeleteTagTemplateResponse, error)
	mustEmbedUnimplementedCompassServiceServer()
}

// UnimplementedCompassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompassServiceServer struct {
}

func (UnimplementedCompassServiceServer) GetAllDiscussions(context.Context, *GetAllDiscussionsRequest) (*GetAllDiscussionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDiscussions not implemented")
}
func (UnimplementedCompassServiceServer) CreateDiscussion(context.Context, *CreateDiscussionRequest) (*CreateDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) PatchDiscussion(context.Context, *PatchDiscussionRequest) (*PatchDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCompassServiceServer) GetAllComments(context.Context, *GetAllCommentsRequest) (*GetAllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedCompassServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCompassServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCompassServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCompassServiceServer) SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAssets not implemented")
}
func (UnimplementedCompassServiceServer) GroupAssets(context.Context, *GroupAssetsRequest) (*GroupAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAssets not implemented")
}
func (UnimplementedCompassServiceServer) SuggestAssets(context.Context, *SuggestAssetsRequest) (*SuggestAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestAssets not implemented")
}
func (UnimplementedCompassServiceServer) GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedCompassServiceServer) GetAllTypes(context.Context, *GetAllTypesRequest) (*GetAllTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypes not implemented")
}
func (UnimplementedCompassServiceServer) GetAllAssets(context.Context, *GetAllAssetsRequest) (*GetAllAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssets not implemented")
}
func (UnimplementedCompassServiceServer) GetAssetByID(context.Context, *GetAssetByIDRequest) (*GetAssetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetByID not implemented")
}
func (UnimplementedCompassServiceServer) UpsertAsset(context.Context, *UpsertAssetRequest) (*UpsertAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAsset not implemented")
}
func (UnimplementedCompassServiceServer) UpsertPatchAsset(context.Context, *UpsertPatchAssetRequest) (*UpsertPatchAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPatchAsset not implemented")
}
func (UnimplementedCompassServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedCompassServiceServer) GetAssetStargazers(context.Context, *GetAssetStargazersRequest) (*GetAssetStargazersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetStargazers not implemented")
}
func (UnimplementedCompassServiceServer) GetAssetVersionHistory(context.Context, *GetAssetVersionHistoryRequest) (*GetAssetVersionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetVersionHistory not implemented")
}
func (UnimplementedCompassServiceServer) GetAssetByVersion(context.Context, *GetAssetByVersionRequest) (*GetAssetByVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetByVersion not implemented")
}
func (UnimplementedCompassServiceServer) CreateAssetProbe(context.Context, *CreateAssetProbeRequest) (*CreateAssetProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetProbe not implemented")
}
func (UnimplementedCompassServiceServer) GetUserStarredAssets(context.Context, *GetUserStarredAssetsRequest) (*GetUserStarredAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStarredAssets not implemented")
}
func (UnimplementedCompassServiceServer) GetMyStarredAssets(context.Context, *GetMyStarredAssetsRequest) (*GetMyStarredAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyStarredAssets not implemented")
}
func (UnimplementedCompassServiceServer) GetMyStarredAsset(context.Context, *GetMyStarredAssetRequest) (*GetMyStarredAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyStarredAsset not implemented")
}
func (UnimplementedCompassServiceServer) StarAsset(context.Context, *StarAssetRequest) (*StarAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarAsset not implemented")
}
func (UnimplementedCompassServiceServer) UnstarAsset(context.Context, *UnstarAssetRequest) (*UnstarAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstarAsset not implemented")
}
func (UnimplementedCompassServiceServer) GetMyDiscussions(context.Context, *GetMyDiscussionsRequest) (*GetMyDiscussionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDiscussions not implemented")
}
func (UnimplementedCompassServiceServer) CreateTagAsset(context.Context, *CreateTagAssetRequest) (*CreateTagAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagAsset not implemented")
}
func (UnimplementedCompassServiceServer) GetTagByAssetAndTemplate(context.Context, *GetTagByAssetAndTemplateRequest) (*GetTagByAssetAndTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagByAssetAndTemplate not implemented")
}
func (UnimplementedCompassServiceServer) UpdateTagAsset(context.Context, *UpdateTagAssetRequest) (*UpdateTagAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagAsset not implemented")
}
func (UnimplementedCompassServiceServer) DeleteTagAsset(context.Context, *DeleteTagAssetRequest) (*DeleteTagAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagAsset not implemented")
}
func (UnimplementedCompassServiceServer) GetAllTagsByAsset(context.Context, *GetAllTagsByAssetRequest) (*GetAllTagsByAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTagsByAsset not implemented")
}
func (UnimplementedCompassServiceServer) GetAllTagTemplates(context.Context, *GetAllTagTemplatesRequest) (*GetAllTagTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTagTemplates not implemented")
}
func (UnimplementedCompassServiceServer) CreateTagTemplate(context.Context, *CreateTagTemplateRequest) (*CreateTagTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagTemplate not implemented")
}
func (UnimplementedCompassServiceServer) GetTagTemplate(context.Context, *GetTagTemplateRequest) (*GetTagTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagTemplate not implemented")
}
func (UnimplementedCompassServiceServer) UpdateTagTemplate(context.Context, *UpdateTagTemplateRequest) (*UpdateTagTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagTemplate not implemented")
}
func (UnimplementedCompassServiceServer) DeleteTagTemplate(context.Context, *DeleteTagTemplateRequest) (*DeleteTagTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagTemplate not implemented")
}
func (UnimplementedCompassServiceServer) mustEmbedUnimplementedCompassServiceServer() {}

// UnsafeCompassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompassServiceServer will
// result in compilation errors.
type UnsafeCompassServiceServer interface {
	mustEmbedUnimplementedCompassServiceServer()
}

func RegisterCompassServiceServer(s grpc.ServiceRegistrar, srv CompassServiceServer) {
	s.RegisterService(&CompassService_ServiceDesc, srv)
}

func _CompassService_GetAllDiscussions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDiscussionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllDiscussions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllDiscussions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllDiscussions(ctx, req.(*GetAllDiscussionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_CreateDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateDiscussion(ctx, req.(*CreateDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetDiscussion(ctx, req.(*GetDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_PatchDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).PatchDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_PatchDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).PatchDiscussion(ctx, req.(*PatchDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllComments(ctx, req.(*GetAllCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_SearchAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).SearchAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_SearchAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).SearchAssets(ctx, req.(*SearchAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GroupAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GroupAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GroupAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GroupAssets(ctx, req.(*GroupAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_SuggestAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).SuggestAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_SuggestAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).SuggestAssets(ctx, req.(*SuggestAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetGraph(ctx, req.(*GetGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllTypes(ctx, req.(*GetAllTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllAssets(ctx, req.(*GetAllAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAssetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAssetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAssetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAssetByID(ctx, req.(*GetAssetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpsertAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpsertAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UpsertAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpsertAsset(ctx, req.(*UpsertAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpsertPatchAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPatchAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpsertPatchAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UpsertPatchAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpsertPatchAsset(ctx, req.(*UpsertPatchAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAssetStargazers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetStargazersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAssetStargazers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAssetStargazers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAssetStargazers(ctx, req.(*GetAssetStargazersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAssetVersionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetVersionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAssetVersionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAssetVersionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAssetVersionHistory(ctx, req.(*GetAssetVersionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAssetByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAssetByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAssetByVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAssetByVersion(ctx, req.(*GetAssetByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateAssetProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateAssetProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_CreateAssetProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateAssetProbe(ctx, req.(*CreateAssetProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetUserStarredAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStarredAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetUserStarredAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetUserStarredAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetUserStarredAssets(ctx, req.(*GetUserStarredAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetMyStarredAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyStarredAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetMyStarredAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetMyStarredAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetMyStarredAssets(ctx, req.(*GetMyStarredAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetMyStarredAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyStarredAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetMyStarredAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetMyStarredAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetMyStarredAsset(ctx, req.(*GetMyStarredAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_StarAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).StarAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_StarAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).StarAsset(ctx, req.(*StarAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UnstarAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnstarAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UnstarAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UnstarAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UnstarAsset(ctx, req.(*UnstarAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetMyDiscussions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyDiscussionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetMyDiscussions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetMyDiscussions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetMyDiscussions(ctx, req.(*GetMyDiscussionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateTagAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateTagAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_CreateTagAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateTagAsset(ctx, req.(*CreateTagAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetTagByAssetAndTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByAssetAndTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetTagByAssetAndTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetTagByAssetAndTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetTagByAssetAndTemplate(ctx, req.(*GetTagByAssetAndTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpdateTagAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpdateTagAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UpdateTagAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpdateTagAsset(ctx, req.(*UpdateTagAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_DeleteTagAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).DeleteTagAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_DeleteTagAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).DeleteTagAsset(ctx, req.(*DeleteTagAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllTagsByAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTagsByAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllTagsByAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllTagsByAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllTagsByAsset(ctx, req.(*GetAllTagsByAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllTagTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTagTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllTagTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetAllTagTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllTagTemplates(ctx, req.(*GetAllTagTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateTagTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateTagTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_CreateTagTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateTagTemplate(ctx, req.(*CreateTagTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetTagTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetTagTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_GetTagTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetTagTemplate(ctx, req.(*GetTagTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpdateTagTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpdateTagTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_UpdateTagTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpdateTagTemplate(ctx, req.(*UpdateTagTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_DeleteTagTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).DeleteTagTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompassService_DeleteTagTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).DeleteTagTemplate(ctx, req.(*DeleteTagTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompassService_ServiceDesc is the grpc.ServiceDesc for CompassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotocompany.compass.v1beta1.CompassService",
	HandlerType: (*CompassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDiscussions",
			Handler:    _CompassService_GetAllDiscussions_Handler,
		},
		{
			MethodName: "CreateDiscussion",
			Handler:    _CompassService_CreateDiscussion_Handler,
		},
		{
			MethodName: "GetDiscussion",
			Handler:    _CompassService_GetDiscussion_Handler,
		},
		{
			MethodName: "PatchDiscussion",
			Handler:    _CompassService_PatchDiscussion_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CompassService_CreateComment_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _CompassService_GetAllComments_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CompassService_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CompassService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CompassService_DeleteComment_Handler,
		},
		{
			MethodName: "SearchAssets",
			Handler:    _CompassService_SearchAssets_Handler,
		},
		{
			MethodName: "GroupAssets",
			Handler:    _CompassService_GroupAssets_Handler,
		},
		{
			MethodName: "SuggestAssets",
			Handler:    _CompassService_SuggestAssets_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _CompassService_GetGraph_Handler,
		},
		{
			MethodName: "GetAllTypes",
			Handler:    _CompassService_GetAllTypes_Handler,
		},
		{
			MethodName: "GetAllAssets",
			Handler:    _CompassService_GetAllAssets_Handler,
		},
		{
			MethodName: "GetAssetByID",
			Handler:    _CompassService_GetAssetByID_Handler,
		},
		{
			MethodName: "UpsertAsset",
			Handler:    _CompassService_UpsertAsset_Handler,
		},
		{
			MethodName: "UpsertPatchAsset",
			Handler:    _CompassService_UpsertPatchAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _CompassService_DeleteAsset_Handler,
		},
		{
			MethodName: "GetAssetStargazers",
			Handler:    _CompassService_GetAssetStargazers_Handler,
		},
		{
			MethodName: "GetAssetVersionHistory",
			Handler:    _CompassService_GetAssetVersionHistory_Handler,
		},
		{
			MethodName: "GetAssetByVersion",
			Handler:    _CompassService_GetAssetByVersion_Handler,
		},
		{
			MethodName: "CreateAssetProbe",
			Handler:    _CompassService_CreateAssetProbe_Handler,
		},
		{
			MethodName: "GetUserStarredAssets",
			Handler:    _CompassService_GetUserStarredAssets_Handler,
		},
		{
			MethodName: "GetMyStarredAssets",
			Handler:    _CompassService_GetMyStarredAssets_Handler,
		},
		{
			MethodName: "GetMyStarredAsset",
			Handler:    _CompassService_GetMyStarredAsset_Handler,
		},
		{
			MethodName: "StarAsset",
			Handler:    _CompassService_StarAsset_Handler,
		},
		{
			MethodName: "UnstarAsset",
			Handler:    _CompassService_UnstarAsset_Handler,
		},
		{
			MethodName: "GetMyDiscussions",
			Handler:    _CompassService_GetMyDiscussions_Handler,
		},
		{
			MethodName: "CreateTagAsset",
			Handler:    _CompassService_CreateTagAsset_Handler,
		},
		{
			MethodName: "GetTagByAssetAndTemplate",
			Handler:    _CompassService_GetTagByAssetAndTemplate_Handler,
		},
		{
			MethodName: "UpdateTagAsset",
			Handler:    _CompassService_UpdateTagAsset_Handler,
		},
		{
			MethodName: "DeleteTagAsset",
			Handler:    _CompassService_DeleteTagAsset_Handler,
		},
		{
			MethodName: "GetAllTagsByAsset",
			Handler:    _CompassService_GetAllTagsByAsset_Handler,
		},
		{
			MethodName: "GetAllTagTemplates",
			Handler:    _CompassService_GetAllTagTemplates_Handler,
		},
		{
			MethodName: "CreateTagTemplate",
			Handler:    _CompassService_CreateTagTemplate_Handler,
		},
		{
			MethodName: "GetTagTemplate",
			Handler:    _CompassService_GetTagTemplate_Handler,
		},
		{
			MethodName: "UpdateTagTemplate",
			Handler:    _CompassService_UpdateTagTemplate_Handler,
		},
		{
			MethodName: "DeleteTagTemplate",
			Handler:    _CompassService_DeleteTagTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gotocompany/compass/v1beta1/service.proto",
}
